name: Tests
on:
  push:
    # branches:
    #   - main
  pull_request:

env:
  DOCKER_BUILDKIT: 1

jobs:
  # build:
  #   runs-on: ubuntu-22.04
  #   name: Build
  #   steps:
  #   - uses: actions/setup-go@v5
  #     with:
  #       go-version: '1.21.x'
  #   - uses: actions/checkout@v4
  #   - name: Build all
  #     run: |
  #       make
  #       ls -al ./out/c2w
  #       if ldd ./out/c2w ; then echo "must be static binary" ; exit 1 ; fi
  #       ls -al ./out/c2w-net
  #       if ldd ./out/c2w-net ; then echo "must be static binary" ; exit 1 ; fi

  # test:
  #   runs-on: ubuntu-22.04
  #   name: Test
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: ["TestWasmtime", "TestWamr", "TestWasmer", "TestWazero", "TestWasmedge"]
  #       arch: ["x86_64", "(riscv64|aarch64)"]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: binfmt
  #     run: |
  #       docker run --privileged --rm tonistiigi/binfmt --install riscv64
  #   - name: test
  #     env:
  #       GO_TEST_FLAGS: -run ${{ matrix.target }}/.*arch=${{ matrix.arch }}.*
  #     run: |
  #       make test

  benchmark-pull:
    runs-on: ubuntu-22.04
    name: Benchmark
    env:
      PERCENTILE: 90
      SAMPLES_NUM: 15
      BENCHMARK_RESULT_DIR: ${{ github.workspace }}/benchmark/
    steps:
    - name: Install tools
      run: |
          pip install numpy
    - uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
    - uses: actions/checkout@v4
    - name: Get instance information
      run: |
        mkdir -p "${{ env.BENCHMARK_RESULT_DIR }}"
        curl -H "Metadata:true" "http://169.254.169.254/metadata/instance?api-version=2019-11-01" | \
        jq '{ location : .compute.location, vmSize : .compute.vmSize }' | \
        tee ${{ env.BENCHMARK_RESULT_DIR }}/instance.json
    - name: run
      working-directory: tests/benchmark-pull
      env:
        BENCHMARK_RESULT: ${{ env.BENCHMARK_RESULT_DIR }}/result
        TARGET_FILE: targets
      run: |
        mkdir -p "${{ env.BENCHMARK_RESULT_DIR }}"
        ./run.sh
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: "benchmarking-result"
        path: ${{ env.BENCHMARK_RESULT_DIR }}

  # benchmark:
  #   runs-on: ubuntu-22.04
  #   name: Benchmark
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Benchmark
  #     run: |
  #       make benchmark

  # linter:
  #   runs-on: ubuntu-22.04
  #   name: Linter
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: golangci-lint
  #     uses: golangci/golangci-lint-action@v4
  #     with:
  #       version: v1.55
  #       args: --verbose

  # project:
  #   name: Project Checks
  #   runs-on: ubuntu-22.04
  #   steps:
  #   - uses: actions/setup-go@v5
  #     with:
  #       go-version: 1.21.x
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 100
  #   - name: "Check DCO sign"
  #     run: |
  #       go install github.com/vbatts/git-validation@v1.2.0
  #       git-validation -v -run DCO
